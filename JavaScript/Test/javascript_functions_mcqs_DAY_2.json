{
    "questions": [
        {
            "id": 1,
            "kind": "mcq",
            "text": "Which of these is a function declaration?",
            "options": [
                "const f = function() {}",
                "function f() {}",
                "const f = () => {}",
                "(function(){})()"
            ],
            "answer": "function f() {}",
            "points": 1
        },
        {
            "id": 2,
            "kind": "mcq",
            "text": "Which of these is a function expression?",
            "options": [
                "function foo() {}",
                "const foo = function() {}",
                "function foo(){}()",
                "const foo = () => {}"
            ],
            "answer": "const foo = function() {}",
            "points": 1
        },
        {
            "id": 3,
            "kind": "mcq",
            "text": "Which one is an arrow function expression?",
            "options": [
                "function a() {}",
                "var a = function() {}",
                "const a = () => {}",
                "(function(){})()"
            ],
            "answer": "const a = () => {}",
            "points": 1
        },
        {
            "id": 4,
            "kind": "mcq",
            "text": "Which example shows an IIFE?",
            "options": [
                "function i() {}",
                "const i = () => {}",
                "(function(){ console.log(\"Hi\") })();",
                "const i = function i() {}"
            ],
            "answer": "(function(){ console.log(\"Hi\") })();",
            "points": 1
        },
        {
            "id": 5,
            "kind": "mcq",
            "text": "Which is a named function expression?",
            "options": [
                "const g = function() {}",
                "function g() {}",
                "const g = function namedG() {}",
                "const g = () => {}"
            ],
            "answer": "const g = function namedG() {}",
            "points": 1
        },
        {
            "id": 6,
            "kind": "mcq",
            "text": "What are arguments (in contrast to parameters)?",
            "options": [
                "Placeholders in the function definition",
                "The actual values passed when calling a function",
                "The same as default parameters",
                "A reserved keyword"
            ],
            "answer": "The actual values passed when calling a function",
            "points": 1
        },
        {
            "id": 7,
            "kind": "mcq",
            "text": "If a function sum(a,b,c) is called as sum(1,2), what will c be?",
            "options": [
                "0",
                "null",
                "undefined",
                "Throws error"
            ],
            "answer": "undefined",
            "points": 1
        },
        {
            "id": 8,
            "kind": "mcq",
            "text": "If a function has fewer parameters than arguments passed, what happens to extra arguments?",
            "options": [
                "They cause an error",
                "They are ignored unless accessed via the arguments object",
                "They overwrite last parameter",
                "They become globals"
            ],
            "answer": "They are ignored unless accessed via the arguments object",
            "points": 1
        },
        {
            "id": 9,
            "kind": "mcq",
            "text": "How can a function access all arguments including extra?",
            "options": [
                "this.args",
                "arguments object",
                "default keyword",
                "global variables"
            ],
            "answer": "arguments object",
            "points": 1
        },
        {
            "id": 10,
            "kind": "mcq",
            "text": "Which call uses default for age in function greet(name='Guest', age=18)?",
            "options": [
                "greet(\"Alice\")",
                "greet(\"Bob\", 25)",
                "greet(\"Charlie\", undefined)",
                "Both A and C"
            ],
            "answer": "Both A and C",
            "points": 1
        },
        {
            "id": 11,
            "kind": "mcq",
            "text": "Which variables are block scoped?",
            "options": [
                "var only",
                "function declarations",
                "let and const",
                "global variables"
            ],
            "answer": "let and const",
            "points": 1
        },
        {
            "id": 12,
            "kind": "mcq",
            "text": "What happens if you console.log(b) before let b=10?",
            "options": [
                "Prints undefined",
                "Prints 10",
                "ReferenceError",
                "Prints null"
            ],
            "answer": "ReferenceError",
            "points": 1
        },
        {
            "id": 13,
            "kind": "mcq",
            "text": "What happens if you console.log(a) before var a=5?",
            "options": [
                "ReferenceError",
                "undefined",
                "5",
                "null"
            ],
            "answer": "undefined",
            "points": 1
        },
        {
            "id": 14,
            "kind": "mcq",
            "text": "Why does sayHi() give TypeError before var sayHi=function(){}?",
            "options": [
                "Function expressions are hoisted and callable",
                "sayHi is hoisted as undefined, so calling gives TypeError",
                "var is block-scoped",
                "Syntax is invalid"
            ],
            "answer": "sayHi is hoisted as undefined, so calling gives TypeError",
            "points": 1
        },
        {
            "id": 15,
            "kind": "mcq",
            "text": "Which function type can be called before appearing in code?",
            "options": [
                "Function expression with var",
                "Arrow function",
                "Function declaration",
                "Named function expression"
            ],
            "answer": "Function declaration",
            "points": 1
        },
        {
            "id": 16,
            "kind": "mcq",
            "text": "What is Temporal Dead Zone (TDZ)?",
            "options": [
                "When var variables undefined",
                "Period between hoisting and initialization for let/const",
                "When functions run",
                "Debugger mode"
            ],
            "answer": "Period between hoisting and initialization for let/const",
            "points": 1
        },
        {
            "id": 17,
            "kind": "mcq",
            "text": "Which happens in creation phase of execution context?",
            "options": [
                "Code runs line by line",
                "Memory allocated for vars and functions",
                "Functions are invoked",
                "Event loop runs"
            ],
            "answer": "Memory allocated for vars and functions",
            "points": 1
        },
        {
            "id": 18,
            "kind": "mcq",
            "text": "Which statement best describes lexical scope?",
            "options": [
                "Variables resolved based on call site",
                "Variables resolved based on where code is written",
                "Variables always global",
                "Variables only block local"
            ],
            "answer": "Variables resolved based on where code is written",
            "points": 1
        },
        {
            "id": 19,
            "kind": "mcq",
            "text": "Which is not hoisted as callable function?",
            "options": [
                "function f(){}",
                "var f=function(){}",
                "const f=()=>{}",
                "Both B and C"
            ],
            "answer": "Both B and C",
            "points": 1
        },
        {
            "id": 20,
            "kind": "mcq",
            "text": "Which console.log will error here? function testScope(){let localVar='x';if(true){let blockVar='y';console.log(blockVar);}console.log(blockVar);} testScope();",
            "options": [
                "First log",
                "Second log",
                "Both",
                "Neither"
            ],
            "answer": "Second log",
            "points": 1
        },
        {
            "id": 21,
            "kind": "mcq",
            "text": "Which calls use default parameters in function f(a=1,b=2)?",
            "options": [
                "f()",
                "f(5)",
                "f(5, undefined)",
                "All of the above"
            ],
            "answer": "All of the above",
            "points": 1
        },
        {
            "id": 22,
            "kind": "mcq",
            "text": "What will typeof sayHi print before var sayHi=function(){}?",
            "options": [
                "\"function\"",
                "\"undefined\"",
                "ReferenceError",
                "\"object\""
            ],
            "answer": "\"undefined\"",
            "points": 1
        },
        {
            "id": 23,
            "kind": "mcq",
            "text": "Which declarations hoisted but uninitialized until execution?",
            "options": [
                "var",
                "function",
                "let and const",
                "function expressions"
            ],
            "answer": "let and const",
            "points": 1
        },
        {
            "id": 24,
            "kind": "mcq",
            "text": "What will sum(1,2) log for function sum(a,b,c){console.log(a,b,c);}",
            "options": [
                "1 2 0",
                "1 2 undefined",
                "1 2 3",
                "Error"
            ],
            "answer": "1 2 undefined",
            "points": 1
        },
        {
            "id": 25,
            "kind": "mcq",
            "text": "Which statement is correct about function expressions vs declarations?",
            "options": [
                "Both hoisted with bodies",
                "Declarations hoisted fully, expressions not callable before assignment",
                "Expressions hoisted, declarations not",
                "Neither hoisted"
            ],
            "answer": "Declarations hoisted fully, expressions not callable before assignment",
            "points": 1
        },
        {
            "id": 26,
            "kind": "mcq",
            "text": "What will this print? let x=1;function outer(){let x=2;function inner(){console.log(x);}inner();}outer();",
            "options": [
                "1",
                "2",
                "undefined",
                "Error"
            ],
            "answer": "2",
            "points": 1
        },
        {
            "id": 27,
            "kind": "mcq",
            "text": "What will typeof fn print before function fn(){return 5;}",
            "options": [
                "\"undefined\"",
                "\"function\"",
                "ReferenceError",
                "\"object\""
            ],
            "answer": "\"function\"",
            "points": 1
        },
        {
            "id": 28,
            "kind": "mcq",
            "text": "Why does sayHi() fail before var sayHi=function(){}",
            "options": [
                "Arrow functions not supported",
                "sayHi hoisted undefined cannot call",
                "Function declarations blocked",
                "var makes function block-scoped"
            ],
            "answer": "sayHi hoisted undefined cannot call",
            "points": 1
        },
        {
            "id": 29,
            "kind": "mcq",
            "text": "Which object gives access to all arguments inside non-arrow function?",
            "options": [
                "extraArgs",
                "arguments",
                "this.arguments",
                "params"
            ],
            "answer": "arguments",
            "points": 1
        },
        {
            "id": 30,
            "kind": "mcq",
            "text": "Which statement summarizes hoisting correctly?",
            "options": [
                "JS moves code physically",
                "Declarations stored during creation phase, let/const uninitialized (TDZ)",
                "Nothing hoisted",
                "Only const hoisted"
            ],
            "answer": "Declarations stored during creation phase, let/const uninitialized (TDZ)",
            "points": 1
        }
    ]
}